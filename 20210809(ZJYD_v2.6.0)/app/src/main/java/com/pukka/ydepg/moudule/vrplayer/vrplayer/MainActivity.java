package com.pukka.ydepg.moudule.vrplayer.vrplayer;import android.app.Activity;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.target.SimpleTarget;import com.bumptech.glide.request.transition.Transition;import com.google.gson.Gson;import com.huawei.ott.sdk.log.DebugLog;import com.pukka.ydepg.R;import com.pukka.ydepg.moudule.vrplayer.vrplayer.adapter.VideoAdapter;import com.pukka.ydepg.moudule.vrplayer.vrplayer.autoupdate.UpdateApk;import com.pukka.ydepg.moudule.vrplayer.vrplayer.global.Constant;import com.pukka.ydepg.moudule.vrplayer.vrplayer.module.VideoBean;import com.pukka.ydepg.moudule.vrplayer.vrplayer.module.VideoListConfig;import com.pukka.ydepg.moudule.vrplayer.vrplayer.module.config.PickFileActivity;import com.pukka.ydepg.moudule.vrplayer.vrplayer.utils.FileUtils;import com.pukka.ydepg.moudule.vrplayer.vrplayer.utils.UriUtil;import org.json.JSONArray;import org.json.JSONObject;import java.io.File;import java.util.ArrayList;/** * @author l00477311 * @since 2020年7月23日 */public class MainActivity extends Activity {    private RecyclerView recyclerView;    private VideoAdapter adapter;    private ArrayList<VideoBean> mList;    private String background;    /**     * 备份的外置存储url列表文件     */    private String externalFilePath = "";    private  VideoListConfig allConfig ;    private UpdateApk updateApk;    private boolean hasCheckUpdate = false;    /**     * 获取文件回调     */    private final int FLAG_TAG = 0x8907;    /**     * 隐藏功能，快速连续点击3次,进入config界面     */    private int configNum;    private static final String TAG = MainActivity.class.getSimpleName();    private Handler configHandler = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message msg) {            if (configNum == 3) {                final String[] items = {"日志级别配置"};                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);                builder.setTitle("配置选择").setSingleChoiceItems(items, 0, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                            showLogChoice();                        dialog.dismiss();                    }                });                builder.create().show();            }            configNum = 0;            return false;        }    });    //初始化定义    private void initView() {        recyclerView = (RecyclerView) findViewById(R.id.rc_select);        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);        //设置为垂直布局，这也是默认的        linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);       // 设置布局管理器        recyclerView.setLayoutManager(linearLayoutManager);        adapter = new VideoAdapter(this, mList);        //设置Adapter        recyclerView.setAdapter(adapter);        View ContentView = findViewById(R.id.main);        Glide.with(MainActivity.this).load(background).into(new SimpleTarget<Drawable>() {            @Override            public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {                ContentView.setBackground(resource);// 设置背景            }        });//        Glide.with(MainActivity.this)//                .load(background)//                .asBitmap()//                .into(new SimpleTarget<Bitmap>() { // 括号里可以指定图片宽高//                    @Override//                    public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {//                        Drawable drawable = new BitmapDrawable(resource);//                        ContentView.setBackground(drawable);// 设置背景//                    }//                });    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_video_select_player);        externalFilePath = Environment.getExternalStorageDirectory() + File.separator + "360vr.json";        Intent intent = getIntent();        Bundle bundle = intent.getExtras();        try {            if (bundle != null) {                Gson gson = new Gson();                JSONArray vbList = new JSONArray(bundle.getString("videoList"));                if (mList == null) {                    mList = new ArrayList<>();                }                for (int i = 0; i < vbList.length(); i ++) {                    JSONObject vbObj = vbList.getJSONObject(i);                    VideoBean vb = gson.fromJson(vbObj.toString(), VideoBean.class);                    mList.add(vb);                }            } else {                initVideoData();            }        } catch (Exception e) {            e.printStackTrace();        }        initView();        hasCheckUpdate = false;    }    private void initVideoData() {        File file = new File(externalFilePath);        String urlJson = null;        if (file.exists()) {            urlJson = FileUtils.getFromSDCard(externalFilePath);            Log.d(TAG,"[initConfig] from File");        }        if(TextUtils.isEmpty(urlJson)){            urlJson = FileUtils.getFromAssets(this, "videoList.json");            Log.d(TAG,"[initConfig] from Assets");            file.delete();        }        allConfig = FileUtils.getVideListConfig(urlJson);        if (allConfig != null) {            mList = allConfig.getConfigList();            background = allConfig.getBackground();        }else            {            AlertDialog.Builder builder=new AlertDialog.Builder(this);            builder.setTitle("提示：");            builder.setMessage("升级成功，请点击确定返回");            //设置确定按钮            builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    finish();                }            });            builder.show();        }    }    private void go2PickFile() {        startActivityForResult(new Intent(MainActivity.this, PickFileActivity.class), FLAG_TAG);    }    private void showLogChoice(){        DebugLog.info(TAG,"[showLogChoice] 日志级别选择");        final String[] items = {"Debug级别", "Info级别","Error级别","关闭日志"};        int checkedItem = 0;        if(DebugLog.logcatEnable(DebugLog.DEBUG)){        }else if(DebugLog.logcatEnable(DebugLog.INFO)){            checkedItem = 1;        }else if(DebugLog.logcatEnable(DebugLog.ERROR)){            checkedItem = 2;        }else{            checkedItem = 3;        }        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);        builder.setTitle("日志级别选择").setSingleChoiceItems(items, checkedItem, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                DebugLog.error(TAG,"[showLogChoice] 日志级别选择 = "+which);                int debugLogLevel = DebugLog.DEBUG;                switch (which){                    case 0:                        debugLogLevel = DebugLog.DEBUG;                        break;                    case 1:                        debugLogLevel = DebugLog.INFO;                        break;                    case 2:                        debugLogLevel = DebugLog.ERROR;                        break;                    case 3:                        debugLogLevel = DebugLog.OFF;                        break;                }                DebugLog.initLogcatLevel(debugLogLevel);                //DebugLog.initLogFileLevel(debugLogLevel, VRPlayerApplictaion.LOG_FILE_PATH);                SharedPreferences.Editor editor = VRPlayerApplictaion.getInstance().getSp().edit();//获取编辑器                editor.putInt(VRPlayerApplictaion.LOG_LEVEL, debugLogLevel);                editor.commit();                dialog.dismiss();            }        });        builder.create().show();    }    @Override    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode != Activity.RESULT_OK || requestCode != FLAG_TAG || data == null) {            return;        }        String filePath = data.getStringExtra("filePath");        if (TextUtils.isEmpty(filePath)) {            Uri uri = data.getData();//得到uri，后面就是将uri转化成file的过程。            if (uri == null) {                return;            }            if (!uri.toString().endsWith("json")) {                Toast.makeText(MainActivity.this, "请选择正确的json文件", Toast.LENGTH_SHORT).show();                return;            }            if ("file".equalsIgnoreCase(uri.getScheme())) {//使用第三方应用打开                filePath = uri.getPath();            } else if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {//4.4以后                filePath = UriUtil.getPath(this, uri);            } else {//4.4以下下系统调用方法                filePath = UriUtil.getRealPathFromURI(MainActivity.this, uri);            }        }        Log.d(TAG, "getRealPathFromUri:" + filePath);        if (TextUtils.isEmpty(filePath)) {            Toast.makeText(MainActivity.this, "文件路径获取失败", Toast.LENGTH_SHORT).show();            return;        }        String readString = "";        //使用apk内置url        if("assets".equals(filePath)){            readString = FileUtils.getFromAssets(this, Constant.FILE_NAME);            Log.i(TAG,"[initConfig] from Assets");            new File(externalFilePath).delete();        }else{            readString = FileUtils.getFromSDCard(filePath);        }        Log.d(TAG, "readJson:" + readString);        // 保存CONFIG文件        // 记录地址        SharedPreferences sp = getSharedPreferences("CONFIG_DATA", 0);        SharedPreferences.Editor editor = sp.edit();        editor.putString("EXTERNAL_CONFIG_FILE_PATH", filePath);        editor.commit();        allConfig = FileUtils.getVideListConfig(readString);        if (allConfig == null) {            Toast.makeText(MainActivity.this, "文件解析失败", Toast.LENGTH_SHORT).show();            return;        }        if(!"assets".equals(filePath)){            FileUtils.copyFile(filePath, externalFilePath);        }        adapter.addAllItem(allConfig.getConfigList());        adapter.notifyDataSetChanged();        Toast.makeText(MainActivity.this, "播放地址获取成功！", Toast.LENGTH_SHORT).show();    }    @Override    public boolean onKeyUp(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_DPAD_UP:                configNum++;                configHandler.removeMessages(0);                configHandler.sendEmptyMessageDelayed(0, 400);                break;        }        return super.onKeyUp(keyCode, event);    }    @Override    protected void onResume() {        super.onResume();        if(!hasCheckUpdate){            if(allConfig != null &&!TextUtils.isEmpty(allConfig.getLoginRouteForUpgrade())){                updateApk = new UpdateApk(this);                updateApk.startLogin(allConfig.getLoginRouteForUpgrade());                hasCheckUpdate = true;//                VRPlayerApplictaion.getApplication().setHasCheckUpdate(true);            }else {                DebugLog.debug(TAG,"无升级接口");            }        }else{            DebugLog.debug(TAG,"已经进行过升级检查");        }    }    @Override    protected void onPause() {        super.onPause();    }      @Override    protected void onDestroy() {        super.onDestroy();    }}